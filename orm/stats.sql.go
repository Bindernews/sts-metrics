// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: stats.sql

package orm

import (
	"context"
)

const statsGetOverview = `-- name: StatsGetOverview :one
SELECT id, name, runs, wins, avg_win_rate, p_deck_size, p_floor_reached FROM stats_overview WHERE "name" = $1
`

func (q *Queries) StatsGetOverview(ctx context.Context, name string) (StatsOverview, error) {
	row := q.db.QueryRow(ctx, statsGetOverview, name)
	var i StatsOverview
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Runs,
		&i.Wins,
		&i.AvgWinRate,
		&i.PDeckSize,
		&i.PFloorReached,
	)
	return i, err
}

const statsListCharacters = `-- name: StatsListCharacters :many
SELECT id, name FROM character_list
`

func (q *Queries) StatsListCharacters(ctx context.Context) ([]CharacterList, error) {
	rows, err := q.db.Query(ctx, statsListCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterList
	for rows.Next() {
		var i CharacterList
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
