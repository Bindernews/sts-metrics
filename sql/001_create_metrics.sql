
-- Deduplicate names in other tables
CREATE TABLE StrCache(
    id int primary key generated always as identity,
    str text not null ,
    unique (str)
);
CREATE INDEX ON StrCache USING HASH(str);

-- Dedupe card names
/*
CREATE TABLE CardNames(
    id int primary key generated always as identity,
    "name" text not null,
    UNIQUE ("name")
);
CREATE INDEX ON CardNames USING hash("name");
*/


CREATE OR REPLACE FUNCTION add_str(s TEXT) RETURNS INT
LANGUAGE SQL AS $$
    INSERT INTO StrCache(str) VALUES (s) ON CONFLICT (str) DO NOTHING;
    SELECT id FROM StrCache WHERE str = s;
$$;

CREATE OR REPLACE FUNCTION str_cache_add(s text[]) RETURNS void
LANGUAGE SQL AS $$
    INSERT INTO StrCache(str)
    SELECT t FROM (SELECT unnest(s) as t) strs LEFT JOIN StrCache ON t != StrCache.str
    ON CONFLICT DO NOTHING;
$$;

CREATE OR REPLACE FUNCTION str_cache_to_id(s text[]) RETURNS TABLE(id int)
LANGUAGE SQL AS $$
    WITH str_list AS (SELECT row_number() over () as ix, t FROM (SELECT unnest(s) as t) list)
    SELECT S.id FROM StrCache S RIGHT JOIN str_list ON S.str = str_list.t ORDER BY str_list.ix;
$$;

CREATE OR REPLACE FUNCTION str_cache_to_str(ids int[]) RETURNS TABLE(t text)
LANGUAGE SQL AS $$
    WITH id_list AS (SELECT row_number() over () as ix, id FROM (SELECT unnest(ids) as id) list)
    SELECT S.str as t FROM StrCache S RIGHT JOIN id_list ON S.id = id_list.id ORDER BY id_list.ix;
$$;

CREATE OR REPLACE FUNCTION get_str(i INT) RETURNS TEXT
LANGUAGE SQL AS $$
    SELECT str FROM StrCache WHERE id = i;
$$;

CREATE TABLE RunsData(
    id int primary key generated by default as identity,
    ascension_level int not null,
    /* REVERSE boss relics */
    build_version int not null default 1 references StrCache(id),
    /* REVERSE campfire choices */
    campfire_rested int,
    campfire_upgraded int,
    /* REVERSE card choices */
    character_chosen int not null default 1 references StrCache(id),
    choose_seed boolean not null,
    circlet_count int,
    /* REVERSE damage taken */
    -- EventChoices []RunSchemaJsonEventChoicesElem `json:"event_choices" yaml:"event_choices"`
    floor_reached int not null ,
    gold int not null ,
    items_purchased_floors int array,
    items_purchased_ids int array,
    -- Card remove floors
    items_purged_floors int array,
    -- Card remove names
    items_purged_ids int array,
    -- Encounter ID where player died
    killed_by int not null default 1 references StrCache(id),
    -- Local time in YYYYmmddHHMMSS format
    local_time text not null,
    /** REVERSE master deck */
    -- ID of player's Neow choice
    neow_bonus_id int not null default 1 references StrCache(id),
    -- Trade-off when making Neow choice
    neow_cost_id int not null default 1 references StrCache(id),
    -- Path per floor as a single string
    path_per_floor text not null,
    -- Path taken, stored as single string of characters
    path_taken text not null,
    -- UUID for this run (UUID)
    play_id text not null,
    -- XP gained at the end of the run
    player_experience int not null ,
    -- Play time in seconds
    playtime int not null,
    -- TODO Doc
    potions_floor_spawned int array,
    -- Which floors the player used a potion on
    potions_floor_usage int array,
    /* REVERSE PotionObtains */
    -- PurchasedPurges corresponds to the JSON schema field "purchased_purges".
    purchased_purges int not null,
    /* REVERSE RelicObtains */
    -- Player's score at the end of the run
    score int not null ,
    -- The run seed
    seed_played text not null,
    -- TODO doc
    seed_source_timestamp INT,
    -- Timestamp corresponds to the JSON schema field "timestamp".
    "timestamp" TIMESTAMP,
    -- Victory corresponds to the JSON schema field "victory".
    victory boolean not null,
    -- WinRate corresponds to the JSON schema field "win_rate".
    win_rate float not null,
    UNIQUE (play_id)
);

CREATE TYPE flag_kind AS ENUM (
    'ascension', 'beta', 'daily', 'endless', 'prod', 'trial'
);

CREATE TABLE RunFlags(
    run_id int not null references RunsData(id),
    flag flag_kind,
    PRIMARY KEY (run_id, flag)
);

CREATE TABLE PerFloorData(
    run_id int not null references RunsData(id),
    floor int2 not null,
    gold int not null,
    current_hp int not null,
    max_hp int not null,
    primary key (run_id, floor)
);

CREATE TABLE CampfireChoice(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    "data" int references StrCache(id),
    floor int not null,
    "key" int not null references StrCache(id)
);

CREATE TABLE DamageTaken(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    enemies int not null references StrCache(id),
    floor int not null,
    turns int not null
);

CREATE TABLE BossRelics(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    not_picked int array,
    picked int not null references StrCache(id)
);

CREATE TABLE CardChoices(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    not_picked int array,
    picked int not null references StrCache(id),
    floor int not null
);

CREATE TABLE RelicObtains(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    floor int not null,
    "key" int not null references StrCache(id)
);

CREATE TABLE PotionObtains(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    floor int not null,
    "key" int not null references StrCache(id)
);

CREATE TABLE EventChoices(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    -- damage_healed + damage_taken
	damage_delta int not null,
	event_name_id int not null references StrCache(id),
	floor int not null,
	-- Combo of gold gained+lost
	gold_delta int not null,
	-- Combo of max_hp gained+lost
	max_hp_delta int not null,
	player_choice_id int not null references StrCache(id),
	relics_obtained_ids int[]
);

CREATE TABLE MasterDecks(
    id int primary key generated by default as identity,
    run_id int not null references RunsData(id),
    -- Card id WITHOUT upgrades
    card_id int not null references StrCache(id),
    -- How many upgrades this card has
    upgrades int2 not null,
    -- Copies of this card in the deck
    count int2 not null,
    -- These should be unique
    UNIQUE (run_id, card_id, upgrades)
);

-- Add empty string to cache
INSERT INTO StrCache(str) VALUES ('');

---- create above / drop below ----

drop trigger if exists runstext_update_trg ON RunsText;
drop function if exists runstext_update;
drop view if exists RunsText;
drop table if exists MasterDecks;
drop table if exists EventChoices;
drop table if exists BossRelics;
drop table if exists CardChoices;
drop table if exists DamageTaken;
drop table if exists CampfireChoice;
drop table if exists RelicObtains;
drop table if exists PotionObtains;
drop table if exists RunFlags;
drop table if exists PerFloorData;
drop table if exists RunsData;
drop table if exists StrCache;
drop type if exists flag_kind;
drop function if exists add_str;
drop function if exists get_str;
drop function if exists str_cache_add;
drop function if exists str_cache_to_id;
drop function if exists str_cache_to_str;
